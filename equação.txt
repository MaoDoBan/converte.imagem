// nada que valha a pena aqui até o ======= //

a1: quantidade de keys com 1 caractere
a2: qt de keys com 2 caracteres...
an: qt de keys com n caracteres...

m: máximo de caracteres de tamanho de uma key



i: nível da iteração do loop
a: quantidade de keys reservadas pra i-1



D: dicionário
C: string com dados comprimidos


v: valor único
vr: vezes que o valor se repete
vt: quantos caracteres o valor v ocupa
TV: 1: número de caracteres extras que o v ocupa em C sem passar pelo D

t: tamanho total que o v ocupa em C sem passar por D
t = vr * (vt + TV)

u: tamanho total que o v ocupa em C passando por D (comprimindo)


a: qt de caracteres na chave
f(a) = 


A1: 53 possibilidades pro primeiro caractere de uma key
An: 63       / /      pros demais caracteres de uma key

x: número de valores únicos (subtraídos os que não vale a pena pra a = 1:  x = f(1) )
y: quantidade de caracteres máxima da maior key necessária
z: 

=======================================================================
//nada que valha a pena aqui//

input: conjunto de elementos que podem se repetir
unics: conjunto de elementos não repetidos (cada elemento tem: string dele mesmo, quantas vezes se repete)

f(x,y,z) pra cada elemento de um conjunto de elementos únicos
x é a quantidade de vezes que o elemento se repete no conjunto input
y é o tamanho do elemento, quantos caracteres ele ocupa
z é o tamanho da key que vai representar o elemento

:======================:
//nada pra ver aqui

[dado1, dado2, dado3, ..., dadon]: m: matriz de entrada
  
k: largura máxima da chave onde o dado ainda vale a pena ser comprimido

:==================================:

r: repetição do dado
l: largura da string do dado
u: 1   basicamente a largura do caractere que identifica o dado não comprimido

b: tamanho que o dado ocupa sem comprimir, bruto
b = r * ( l + u )

k: largura da chave (key)

c: tamanho que o dado ocupa comprimido (vezes que a chave é usada + tamanho da chave e valor no dicionário)
c = r * k + ( k + 4 + l )

objetivo é encontrar para cada dado o maior k onde:
c < b

r * k +  k + 4 + l < r * ( l + u )
kr + k < r(l + u) - l - 4
k(r + 1) < r(l + u) - l - 4

k < ( r(l+1) - l - 4 ) / (r + 1)

k = Math.ceil(k-1) /// precisa

https://cdn.discordapp.com/attachments/411901568275709952/876592979555541022/20210815_192711.jpg
//- function f(r, l){ console.log( ( r*(l+1) - 4 - l ) / (r + 1) ); }

se k for menor que 1: descarta

c < b //isolar o r
r * k +  k + 4 + l < r * ( l + 1 )
rl - rK + r > k + l + d
r(l - k + 1) > k + l + d
r > (l + k + d) / (l - k + 1)

:=============================:

tendo x dados únicos que valem a pena comprimir, encontre a quantidade q de caracteres máxima de uma chave:
x = 53 * 63 ^ n
q = n + 1

x = 53 * 63^n
63^n = x / 53
n = log(x/53) base 63

q = n + 1
q = ( log(x/53) base 63 ) + 1

function getBaseLog(x, y){//x elevado a quantos resulta em y?
  return Math.log(y) / Math.log(x);
}
function maxKeyLength(x){
  let max = getBaseLog(63, x/53) + 1;
  return Math.ceil(max);
}

:=========================================:

tendo x dados únicos que valem a pena comprimir, limite k = 2 de tamanho max da chace, encontre a quantidade q de chaves k = 1:
x <= 53 - n + 63n
q = 53 - n

n: quantos caracteres reservar pra keys de k=2

x <= 53 - n + 63n
53 - n + 63n >= x
62n >= x - 53
n >= (x - 53) / 62

:================================================:

r: repetição do dado
l: largura da string do dado
1: basicamente a largura do caractere que identifica o dado não comprimido
Quanto o dado ocupa sem ser comprimido:
s = r * ( l + 1 )

k: largura da string da key
d: quantos caracteres "extras" precisa no dicionário, vai ser 4 para os caracteres "comuns" e 8 se forem acentuados
Tamanho que o dado ocupa comprimido (vezes que a chave é usada + tamanho da chave e valor no dicionário):
c = r * k + k + l + d

!Encontrar para cada dado, com k=n, o e com quanto se economiza comprimindo o dado:
e = s - c

e = s - rk - k - l - d

e = r(l + 1) - (k(r + 1) + l + d)
e = rl + r - (rk + k + l + d)
e = rl + r - rk - k - l - d
e = r(l - k + 1) - l - k - d

::::::::::::::::::::::::::::::::::::::

Quanto o dado ocupa sem ser comprimido:
s = r * ( l + 1 )

Tamanho que o dado ocupa comprimido, só na string output sem o dict (vezes que a chave é usada):
c = r * k

p: espaço "parcial" economizado apenas na string output, sem contar o dict
p = s - c

p = rl + r - rk
p = r(l + 1 - k)

d: o tamanho que o dado a ser comprimido ocupa no dict, tem 3 equações diferentes pra calcular d
d1 = l + 3      //usando íncide da table como array, bom pra k=2+
d2 = k + l + 4  //usando a-z A-Z _ pra k1 e +0-9 pra k2+
d3 = k + l + 8  //usando 200+ caracteres "indiscriminadamente" pra kn

e: economia total
e = p - d

//isolar r
e = r(l + 1 - k) - k - l - D
r(...) = e + k + l + D
r = (e + k + l + D) / (l + 1 - k)

:==============================================:
//paint plans

https://cdn.discordapp.com/attachments/208380070383976448/877290517547847700/unknown.png
https://cdn.discordapp.com/attachments/208380070383976448/877376325013356644/unknown.png

https://cdn.discordapp.com/attachments/411901568275709952/877650515494850620/unknown.png